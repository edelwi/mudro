version: '3.8'

services:
  nginx:

# location of the dockerfile that defines the nginx image.
#  The dockerfile will be used to spin up an image during the build stage.
    build: ./nginx

# map the machine port 1339 to the container port 80. Any traffic from 1339 externally will be passed to
#  port 80 of the NGINX container. You can access this container via localhost:1339
    ports:
      - 1339:80

# will only start if web is up and running
    depends_on:
      - web

# restart service when it fails
    restart: "on-failure"

  web: # service name

#build the image for the web service from the dockerfile in parent directory.
    # build: .
    build: 
      context: .
      dockerfile: Dockerfile.dev

    
# command directive passes the parameters to the service and they will be executed by the service.
#  In this example, these are django commands which will be executed in the container where django lives.
    command: /usr/local/bin/mudro

# map data and files from parent directory in host to microservice directory in docker container
    volumes:
      - .:/mudro_app

    ports:
      - 8080:8080

# file where env variables are stored. Used as best practice so as not to expose secret keys
    env_file:
      - .env # name of the env file

# name of the image
    image: mudro_app

# expose the port to other services defined here so that they can access this service via the exposed port. In the case of Django, this is 8000 by default
    expose:
      - ${PORT} # retrieved from the .env file

    restart: "on-failure"

# cannot start if db service is not up and running
    depends_on:
      - db


  db: # service name

# image name of the postgres database. during build, this will be pulled from dockerhub and a container spun up from it.
    image: postgres:16.1

    volumes:
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data/


# access credentials from the .env file
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - PGPORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - DATABASE_URL=${DATABASE_URL}
      # - POSTGRES_HOST_AUTH_METHOD=trust

    restart: "on-failure"

    env_file:
      - .env


volumes:
  postgres_data: